select(BG, Day, TimeSpent)
View(df.bg_during_exercise)
# BG during exercise
df.bg_during_exercise <- df |>
filter(Exercise == 1) |>
mutate(Day = as_date(Time),
Hour = hour(Time),
Minute = minute(Time),
TimeSpent = paste(Hour, Minute, sep = ":")) |>
group_by(Day) |>
select(BG, Day, TimeSpent)
View(df.bg_during_exercise)
# BG during exercise
df.bg_during_exercise <- df |>
filter(Exercise == 1) |>
mutate(Day = as_date(Time),
Hour = hour(Time),
Minute = minute(Time),
TimeSpent = paste(Hour, Minute, "00", sep = ":")) |>
group_by(Day) |>
select(BG, Day, TimeSpent)
View(df.bg_during_exercise)
str(df.bg_during_exercise)
format(Sys.time(), "%Hh:%Mm:%Ss")
format(seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date()+1), by = "5 min"),
"%H%M", tz="UTC")
format(seq.POSIXt(as.POSIXct(Sys.Date()), as.POSIXct(Sys.Date()+1), by = "5 min"),
"%H:%M", tz="UTC")
# Manipulating the time to "time from start of workout"
time_vector <- format(seq.POSIXt(as.POSIXct(Sys.Date()),
as.POSIXct(Sys.Date()+1),
by = "5 min"),
"%H:%M", tz="UTC")
time_vector[1:16]
df.bg_during_exercise$Minutes[1:16] <- time_vector[1:16]
df.bg_during_exercise$TimeSpent[1:16] <- time_vector[1:16]
View(df.bg_during_exercise)
df.bg_during_exercise$TimeSpent[17:26] <- time_vector[1:9]
df.bg_during_exercise$TimeSpent[17:26] <- time_vector[1:10]
View(df.bg_during_exercise)
df.bg_during_exercise$TimeSpent[27:38] <- time_vector[1:12]
df.bg_during_exercise$TimeSpent[39:47] <- time_vector[1:9]
View(df.bg_during_exercise)
df.bg_during_exercise$TimeSpent[48:55] <- time_vector[1:8]
View(df.bg_during_exercise)
View(df.bg_during_exercise)
# Plotting
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day)))
str(df.bg_during_exercise)
df.bg_during_exercise <- as.data.frame(df.bg_during_exercise)
# Plotting
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day)))
# Plotting
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day)))
# Plotting
df.bg_during_exercise |>
mutate(Minutes = as.numeric(TimeSpent)) |>
ggplot(aes(x=Minutes, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day)))
# Plotting
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day)))
?scale_x_datetime
# Plotting
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
scale_x_datetime()
# Plotting
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day)))
str(df.bg_during_exercise)
# Plotting
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Time Spent Exercising",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2)
# Plotting
xmin <- df.bg_during_exercise$TimeSpent[1]
xmax <- df.bg_during_exercise$TimeSpent[16]
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Time Spent Exercising",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2)
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2) +
scale_x_datetime(date_labels = "%H:%M")
df.bg_during_exercise |>
mutate(TimeSpent = as.POSIXct(TimeSpent)) |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2)
POSIXct(df.bg_during_exercise$TimeSpent)
df.bg_during_exercise$TimeSpent
as_datetime(df.bg_during_exercise$TimeSpent)
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2)
View(df.bg_during_exercise)
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2) +
scale_x_continuous(breaks=c(0,2,4,6,8),labels=c("00:15","00:30","00:45","01:00","01:15"))
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2) +
scale_x_discrete(breaks=c(0,2,4,6,8),labels=c("00:15","00:30","00:45","01:00","01:15"))
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2) +
scale_x_discrete(breaks=c("00:15","00:30","00:45","01:00","01:15"),
labels=c("00:15","00:30","00:45","01:00","01:15"))
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
library(chron)
library(fpp3)
library(plotly)
library(car)
library(forecast)
library(ggthemes)
library(tibbletime)
library(distributional)
theme_set(theme_solarized())
# Importing data
df.model <- df.export
lambda <- BoxCox.lambda(ts$BG, method = c("guerrero"))
ts$BG <- ts$BG^lambda
transformed.ts <- as_tsibble(ts, index = Time)
# Unit root test
transformed.ts |> features(BG, unitroot_kpss)
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
# Train
train <- transformed.ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- transformed.ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
fit
nnetar <- fit |> select(c(NNETAR))
components(nnetar)
components(nnetar) |> autoplot()
arima <- fit |> select(c(ARIMA))
components(arima) |> autoplot()
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24) |>
arrange(lb_pvalue)
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test) |> autoplot(train) +
ylim(c(20, 120)) +
autolayer(test) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG (Transformed)")
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(-c(X)) |>
as_tsibble(key = BG,
index = Time) |>
arrange(Time)
View(df.model)
View(df.model)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(Time, BG, EffectiveCarbs, EffectiveInsulin, Exercise) |>
as_tsibble(key = BG,
index = Time) |>
arrange(Time)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
View(ts)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
train$BG <- train$BG*1
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
test$BG <- test$BG*1
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
str(train)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
arrange(Time)
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00")
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
View(train)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(Time, BG, EffectiveCarbs, EffectiveInsulin, Exercise) |>
as_tsibble() |>
arrange(Time)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(Time, BG, EffectiveCarbs, EffectiveInsulin, Exercise) |>
as_tsibble(index = Time) |>
arrange(Time)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
arrange(Time)
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
fit
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
fit
View(train)
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24) |>
arrange(lb_pvalue)
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test) |> autoplot(train) +
ylim(c(20, 120)) +
autolayer(test) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG (Transformed)")
# Generating the forecast table (fable)
myf <- fit |> select(c(NNETAR)) |> forecast(new_data = test)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(-c(X)) |>
as_tsibble(index = Time) |>
arrange(Time)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(Time, BG, EffectiveCarbs, EffectiveInsulin, Exercise) |>
as_tsibble(index = Time) |>
arrange(Time)
# Raise to the inverse of lambda to back transform the box-cos
test.predict <- test |>
mutate(BG = (BG^(1/lambda))) |>
fill_gaps() |>
arrange(Time)
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test.predict) |> autoplot(train) +
ylim(c(20, 120)) +
autolayer(test) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG (Transformed)")
View(test.predict)
View(test)
lambda <- BoxCox.lambda(ts$BG, method = c("guerrero"))
ts$BG <- ts$BG^lambda
transformed.ts <- as_tsibble(ts, index = Time)
# Unit root test
transformed.ts |> features(BG, unitroot_kpss)
# Train
train <- transformed.ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- transformed.ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
View(test)
# Raise to the inverse of lambda to back transform the box-cos
test.predict <- test |>
mutate(BG = (BG^(1/lambda))) |>
fill_gaps() |>
arrange(Time)
View(test.predict)
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test.predict) |> autoplot(train) +
ylim(c(20, 120)) +
autolayer(test.predict) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG (Transformed)")
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test.predict) |> autoplot(train) +
ylim(c(20, 260)) +
autolayer(test.predict) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG (Transformed)")
getwd()
# Train
train.predict <- train |>
mutate(BG = (BG^(1/lambda))) |>
fill_gaps() |>
arrange(Time)
# Test
test.predict <- test |>
mutate(BG = (BG^(1/lambda))) |>
fill_gaps() |>
arrange(Time)
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test.predict) |> autoplot(train.predict) +
ylim(c(20, 260)) +
autolayer(test.predict) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG")
# Generating the forecast table (fable)
myf <- fit |> select(c(NNETAR)) |> forecast(new_data = test)
# Generating the forecast table (fable)
myf <- fit |> select(c(NNETAR)) |> forecast(new_data = test.predict)
# Generating a point forecast accuracy table
accuracy(myf, test.predict) |>
mutate(Model = .model) |>
select(c(Model, MAE, RMSE, MAPE)) |>
arrange(MAPE)
# Generating a point forecast accuracy table
accuracy(myf, test.predict) |>
mutate(Model = .model) |>
select(c(Model, MAE, RMSE, MAPE)) |>
arrange(MAPE)
myf |> accuracy(test.predict, list(crps =CRPS)) |>
mutate(Model = .model,
CRPS = crps) |>
select(c(Model, CRPS)) |>
arrange(CRPS)
