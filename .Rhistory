scale_x_datetime(date_labels = "%H:%M")
df.bg_during_exercise |>
mutate(TimeSpent = as.POSIXct(TimeSpent)) |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2)
POSIXct(df.bg_during_exercise$TimeSpent)
df.bg_during_exercise$TimeSpent
as_datetime(df.bg_during_exercise$TimeSpent)
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2)
View(df.bg_during_exercise)
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2) +
scale_x_continuous(breaks=c(0,2,4,6,8),labels=c("00:15","00:30","00:45","01:00","01:15"))
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2) +
scale_x_discrete(breaks=c(0,2,4,6,8),labels=c("00:15","00:30","00:45","01:00","01:15"))
df.bg_during_exercise |>
ggplot(aes(x=TimeSpent, y = BG, group = Day, color = Day)) +
geom_point(aes(y = BG, color = factor(Day))) +
geom_line(aes(y = BG, color = factor(Day))) +
labs(title = "Blood Glucose While Exercising",
x = "Length of Exercise",
y = "BG (mg/dL)") +
annotate("rect", xmin = xmin, xmax = xmax, ymin = 70, ymax = 180,
alpha = .2) +
scale_x_discrete(breaks=c("00:15","00:30","00:45","01:00","01:15"),
labels=c("00:15","00:30","00:45","01:00","01:15"))
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
library(chron)
library(fpp3)
library(plotly)
library(car)
library(forecast)
library(ggthemes)
library(tibbletime)
library(distributional)
theme_set(theme_solarized())
# Importing data
df.model <- df.export
lambda <- BoxCox.lambda(ts$BG, method = c("guerrero"))
ts$BG <- ts$BG^lambda
transformed.ts <- as_tsibble(ts, index = Time)
# Unit root test
transformed.ts |> features(BG, unitroot_kpss)
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
# Train
train <- transformed.ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- transformed.ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
fit
nnetar <- fit |> select(c(NNETAR))
components(nnetar)
components(nnetar) |> autoplot()
arima <- fit |> select(c(ARIMA))
components(arima) |> autoplot()
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24) |>
arrange(lb_pvalue)
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test) |> autoplot(train) +
ylim(c(20, 120)) +
autolayer(test) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG (Transformed)")
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(-c(X)) |>
as_tsibble(key = BG,
index = Time) |>
arrange(Time)
View(df.model)
View(df.model)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(Time, BG, EffectiveCarbs, EffectiveInsulin, Exercise) |>
as_tsibble(key = BG,
index = Time) |>
arrange(Time)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
View(ts)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
train$BG <- train$BG*1
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
test$BG <- test$BG*1
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
str(train)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
arrange(Time)
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00")
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
View(train)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(Time, BG, EffectiveCarbs, EffectiveInsulin, Exercise) |>
as_tsibble() |>
arrange(Time)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(Time, BG, EffectiveCarbs, EffectiveInsulin, Exercise) |>
as_tsibble(index = Time) |>
arrange(Time)
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
arrange(Time)
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
fit
# Train
train <- ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
fit <- train |> model(
ARIMA = ARIMA(BG),
Regression = ARIMA(BG ~ EffectiveCarbs + EffectiveInsulin + as.factor(Exercise)),
NNETAR = NNETAR(BG)) |>
mutate(ENSEMBLE = (Regression + ARIMA + NNETAR)/3)
fit
View(train)
# Residuals Plot
augment(fit) |>
autoplot(.resid) +
labs(title = "Residuals for All Models",
y = "Residuals")
# ACF Plots
augment(fit) |>
ACF(.resid) |>
autoplot() +
labs(title = "ACF for All Models",
y = "ACF")
# Portmanteau Test (Ljung-Box Test)
augment(fit) |>
features(.resid, ljung_box, lag = 24) |>
arrange(lb_pvalue)
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test) |> autoplot(train) +
ylim(c(20, 120)) +
autolayer(test) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG (Transformed)")
# Generating the forecast table (fable)
myf <- fit |> select(c(NNETAR)) |> forecast(new_data = test)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(-c(X)) |>
as_tsibble(index = Time) |>
arrange(Time)
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(Time, BG, EffectiveCarbs, EffectiveInsulin, Exercise) |>
as_tsibble(index = Time) |>
arrange(Time)
# Raise to the inverse of lambda to back transform the box-cos
test.predict <- test |>
mutate(BG = (BG^(1/lambda))) |>
fill_gaps() |>
arrange(Time)
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test.predict) |> autoplot(train) +
ylim(c(20, 120)) +
autolayer(test) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG (Transformed)")
View(test.predict)
View(test)
lambda <- BoxCox.lambda(ts$BG, method = c("guerrero"))
ts$BG <- ts$BG^lambda
transformed.ts <- as_tsibble(ts, index = Time)
# Unit root test
transformed.ts |> features(BG, unitroot_kpss)
# Train
train <- transformed.ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- transformed.ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
View(test)
# Raise to the inverse of lambda to back transform the box-cos
test.predict <- test |>
mutate(BG = (BG^(1/lambda))) |>
fill_gaps() |>
arrange(Time)
View(test.predict)
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test.predict) |> autoplot(train) +
ylim(c(20, 120)) +
autolayer(test.predict) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG (Transformed)")
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test.predict) |> autoplot(train) +
ylim(c(20, 260)) +
autolayer(test.predict) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG (Transformed)")
getwd()
# Train
train.predict <- train |>
mutate(BG = (BG^(1/lambda))) |>
fill_gaps() |>
arrange(Time)
# Test
test.predict <- test |>
mutate(BG = (BG^(1/lambda))) |>
fill_gaps() |>
arrange(Time)
# Generating forecast plot
fit |> select(c(NNETAR)) |> forecast(new_data = test.predict) |> autoplot(train.predict) +
ylim(c(20, 260)) +
autolayer(test.predict) +
labs(title = "Neural Network Model Forecast",
x = "Time",
y = "BG")
# Generating the forecast table (fable)
myf <- fit |> select(c(NNETAR)) |> forecast(new_data = test)
# Generating the forecast table (fable)
myf <- fit |> select(c(NNETAR)) |> forecast(new_data = test.predict)
# Generating a point forecast accuracy table
accuracy(myf, test.predict) |>
mutate(Model = .model) |>
select(c(Model, MAE, RMSE, MAPE)) |>
arrange(MAPE)
# Generating a point forecast accuracy table
accuracy(myf, test.predict) |>
mutate(Model = .model) |>
select(c(Model, MAE, RMSE, MAPE)) |>
arrange(MAPE)
myf |> accuracy(test.predict, list(crps =CRPS)) |>
mutate(Model = .model,
CRPS = crps) |>
select(c(Model, CRPS)) |>
arrange(CRPS)
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
library(chron)
library(fpp3)
library(plotly)
library(car)
library(forecast)
library(ggthemes)
library(ggpubr)
library(ggplot2)
library(tibbletime)
library(distributional)
library(dynlm)
library(lmtest)
library(nortest)
library(ggcorrplot)
library(car)
theme_set(theme_solarized())
# Importing data
df <- read.csv("Data/df_model.csv")
df.old <- read.csv("Data/old_BG.csv")
df.basal <- read.csv("Data/basal_data.csv")
df.carbs <- read.csv("Data/carbs_data.csv")
# Calculate optimal binwidth using the Freedman-Diaconis rule
bw <- 2 * IQR(df$BG) / length(df$BG)^(1/3)
# Distribution of blood sugar
ggplot(df, aes(x = BG)) +
annotate("rect", fill = "gray",
xmin = 70, xmax = 180, ymin = 0, ymax = 1000, alpha = .6) +
geom_label(aes(x = 150, y = 875, label = "Normal BG Range"),
color = "white", fill = "gray", alpha = 0.6) +
geom_histogram(color = "black", fill = "purple", binwidth = bw) +
labs(title = "Blood Glucose Distribution",
subtitle = "Including Normal BG Range",
x = "BG (mg/dL)",
y = "Frequency")
# Percent in-range
round(100*(sum(df$BG >= 70 & df$BG <= 180)/nrow(df)), 2)
# Summary statistics
df |> summarise(BG.mean = mean(BG),
BG.sd = sd(BG),
BG.var = var(BG))
# Cleaning carbs data
df.carbs <- df.carbs |>
mutate(Date = as.Date(Date, "%m/%d/%y"),
TimeofDay = format(as.POSIXct(Time.of.Day,format='%I:%M:%S %p'),format="%H:%M:%S"),
Time = ymd_hms(paste(Date, TimeofDay)),
Carbs = as.numeric(Carbs..grams..est..),
Bolus = as.numeric(Bolus..units.)) |>
select(Time, Carbs, Bolus, Food)
# Calculating daily carb intake
df.daily.carbs <- df.carbs |>
mutate(Date = as_date(Time),
Time = floor_date(Date)) |>
group_by(Date) |>
summarize(DailyCarbs = sum(Carbs))
# Generating new time-series to plot
ts.daily.carbs <- df.daily.carbs |>
as_tsibble(index = Date)
# Plotting daily carbs
kgs <- 57
lowmin <- 1*kgs
lowmax <- 3*kgs
midmax <- 6*kgs
highmax <- 8*kgs
ggplot(ts.daily.carbs, aes(x = DailyCarbs)) +
geom_histogram(color = "black", fill = "royalblue", binwidth = 15) +
labs(title = "Daily Carbohydrate Intake Distribution",
subtitle = "Including Recommended Ranges of Daily Carb Intake (Based on Weight)",
x = "Daily Carb Intake",
y = "Frequency") +
annotate("rect", fill = "darkgreen",
xmin = lowmin, xmax = lowmax, ymin = 0, ymax = 18, alpha = .2) +
annotate("rect", fill = "orange",
xmin = lowmax, xmax = midmax, ymin = 0, ymax = 18, alpha = .2) +
annotate("rect", fill = "pink",
xmin = midmax, xmax = highmax, ymin = 0, ymax = 18, alpha = .2) +
geom_label(aes(x = 150, y = 13, label = "Low"), color = "darkgreen", fill = "white") +
geom_label(aes(x = 250, y = 13, label = "Moderate"), color = "orange", fill = "white") +
geom_label(aes(x = 400, y = 13, label = "High"), color = "red", fill = "white")
knitr::opts_chunk$set(echo = TRUE)
projPath <- dirname(rstudioapi::documentPath())
setwd(projPath)
options(scipen = 999)
# Importing data
df.model <- read.csv("Data/df_model.csv")
# Box-Cox transformation, via Guerrero optimization
lambda <- BoxCox.lambda(ts$BG, method = c("guerrero"))
ts <- df.model |>
mutate(Time = as_datetime(Time)) |>
select(Time, BG, EffectiveCarbs, EffectiveInsulin, Exercise) |>
as_tsibble(index = Time) |>
arrange(Time)
# Box-Cox transformation, via Guerrero optimization
lambda <- BoxCox.lambda(ts$BG, method = c("guerrero"))
ts$BG <- ts$BG^lambda
transformed.ts <- as_tsibble(ts, index = Time)
# Unit root test
transformed.ts |> features(BG, unitroot_kpss)
# Train
train <- transformed.ts |>
filter(Time >= "2024-03-11 00:00:00",
Time < "2024-03-15 00:00:00") |>
fill_gaps() |>
arrange(Time)
# Test
test <- transformed.ts |>
filter(Time >= "2024-03-15 00:00:00",
Time < "2024-03-16 00:00:00") |>
fill_gaps() |>
arrange(Time)
fit <- train |> model(
NNETAR = NNETAR(BG))
fit
